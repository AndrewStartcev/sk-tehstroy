/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/assets/js/main.js":
/*!*******************************!*\
  !*** ./src/assets/js/main.js ***!
  \*******************************/
/***/ (function() {

eval("document.addEventListener('DOMContentLoaded', function () {\n  // Находим все элементы с классом has-submenu\n  const submenuParents = document.querySelectorAll('.menu-parent');\n  const header = document.querySelector('.header');\n  const burger = document.querySelector('.header__burger');\n  const mobileMenu = document.querySelector('.mobile-menu');\n\n  burger.addEventListener('click', function (e) {\n    mobileMenu.classList.toggle('show');\n    burger.classList.toggle('show');\n  });\n\n  function checkHeader() {\n    if (window.scrollY > 30) {\n      header.classList.add('header-show');\n    } else {\n      header.classList.remove('header-show');\n    }\n  }\n\n  submenuParents.forEach(function (parent) {\n    const link = parent.querySelector('.menu-parent__item');\n    const submenu = parent.querySelector('.sub-menu');\n\n    // Показываем подменю при наведении\n    parent.addEventListener('mouseenter', function () {\n      submenu.style.display = 'block';\n      submenu.style.opacity = '0';\n      submenu.style.transition = 'opacity 0.3s ease';\n      link.classList.add('show');\n\n      // Небольшая задержка для плавного появления\n      setTimeout(function () {\n        submenu.style.opacity = '1';\n      }, 10);\n    });\n\n    // Скрываем подменю при уходе курсора\n    parent.addEventListener('mouseleave', function () {\n      submenu.style.opacity = '0';\n\n      // После завершения анимации скрываем полностью\n      setTimeout(function () {\n        if (submenu.style.opacity === '0') {\n          submenu.style.display = 'none';\n          link.classList.remove('show');\n        }\n      }, 300);\n    });\n\n    // Для мобильных устройств - по клику\n    link.addEventListener('click', function (e) {\n      if (window.innerWidth <= 1159) {\n        // Мобильное устройство\n        e.preventDefault();\n        const isOpen = submenu.style.display === 'block';\n\n        // Закрываем все открытые подменю\n        document.querySelectorAll('.sub-menu').forEach(function (menu) {\n          if (menu !== submenu) {\n            menu.style.display = 'none';\n            link.classList.toggle('show');\n          }\n        });\n\n        // Открываем/закрываем текущее\n        submenu.style.display = isOpen ? 'none' : 'block';\n      }\n    });\n  });\n\n  document.addEventListener('click', function (e) {\n    if (window.innerWidth <= 768) {\n      const isClickInside = Array.from(submenuParents).some(parent => parent.contains(e.target));\n\n      if (!isClickInside) {\n        document.querySelectorAll('.sub-menu').forEach(function (menu) {\n          menu.style.display = 'none';\n        });\n      }\n    }\n  });\n\n  window.addEventListener('load', checkHeader);\n  window.addEventListener('scroll', checkHeader);\n\n  const popupTriggers = document.querySelectorAll('[data-popup]');\n  const closeButtonsPopup = document.querySelectorAll('.popup__close, .popup-close');\n\n  function closePopup() {\n    document.querySelectorAll('.popup.show').forEach(popup => {\n      popup.classList.remove('show');\n    });\n  }\n\n  popupTriggers.forEach(popupTrigger => {\n    popupTrigger.addEventListener('click', function (event) {\n      event.preventDefault();\n\n      const popupId = popupTrigger.getAttribute('data-popup');\n      const popupElement = document.querySelector(popupId);\n\n      if (!popupElement) {\n        console.error(`Popup с id ${popupId} не найден.`);\n        return;\n      }\n\n      closePopup(); // Закрываем все попапы перед открытием нового\n      popupElement.classList.add('show');\n    });\n  });\n\n  closeButtonsPopup.forEach(closeButton => {\n    closeButton.addEventListener('click', function (event) {\n      event.preventDefault();\n      closePopup();\n    });\n  });\n\n  document.addEventListener('keydown', function (event) {\n    if (event.key === 'Escape') {\n      closePopup();\n    }\n  });\n\n  document.addEventListener('click', function (event) {\n    if (event.target.classList.contains('popup')) {\n      closePopup();\n    }\n  });\n\n  document.querySelectorAll('input[type=\"tel\"]').forEach(input => {\n    if (input) {\n      new PhoneInputFormatter(input);\n    }\n  });\n});\n\nclass PhoneInputFormatter {\n  constructor(input) {\n    this.input = input;\n    this.initEvents();\n  }\n\n  getInputNumbersValue() {\n    return this.input.value ? this.input.value.replace(/\\D/g, '') : '';\n  }\n\n  onPhonePaste(e) {\n    const inputNumbersValue = this.getInputNumbersValue();\n    const pasted = e.clipboardData || window.clipboardData;\n    if (pasted) {\n      const pastedText = pasted.getData('Text');\n      if (/\\D/g.test(pastedText)) {\n        this.input.value = inputNumbersValue;\n      }\n    }\n  }\n\n  onPhoneInput(e) {\n    let inputNumbersValue = this.getInputNumbersValue(),\n      selectionStart = this.input.selectionStart,\n      formattedInputValue = '';\n\n    if (!inputNumbersValue) {\n      return (this.input.value = '');\n    }\n\n    if (this.input.value.length !== selectionStart) {\n      if (e.data && /\\D/g.test(e.data)) {\n        this.input.value = inputNumbersValue;\n      }\n      return;\n    }\n\n    if (['7', '8', '9'].includes(inputNumbersValue[0])) {\n      if (inputNumbersValue[0] === '9') inputNumbersValue = '7' + inputNumbersValue;\n      const firstSymbols = inputNumbersValue[0] === '8' ? '8' : '+7';\n      formattedInputValue = firstSymbols + ' ';\n      if (inputNumbersValue.length > 1) {\n        formattedInputValue += '(' + inputNumbersValue.substring(1, 4);\n      }\n      if (inputNumbersValue.length >= 5) {\n        formattedInputValue += ') ' + inputNumbersValue.substring(4, 7);\n      }\n      if (inputNumbersValue.length >= 8) {\n        formattedInputValue += '-' + inputNumbersValue.substring(7, 9);\n      }\n      if (inputNumbersValue.length >= 10) {\n        formattedInputValue += '-' + inputNumbersValue.substring(9, 11);\n      }\n    } else {\n      formattedInputValue = '+' + inputNumbersValue.substring(0, 16);\n    }\n    this.input.value = formattedInputValue;\n  }\n\n  onPhoneKeyDown(e) {\n    const inputValue = this.input.value.replace(/\\D/g, '');\n    if (e.keyCode === 8 && inputValue.length === 1) {\n      this.input.value = '';\n    }\n  }\n\n  initEvents() {\n    this.input.addEventListener('keydown', e => this.onPhoneKeyDown(e));\n    this.input.addEventListener('input', e => this.onPhoneInput(e), false);\n    this.input.addEventListener('paste', e => this.onPhonePaste(e), false);\n  }\n}\n\n\n//# sourceURL=webpack://gulp-starter/./src/assets/js/main.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/assets/js/main.js"]();
/******/ 	
/******/ })()
;